= Decorator Pattern

This documentation was developed as part of a programming activity for
the <em>Software Design and Architecture</em> course (_Tc3049_), at the
Tecnológico de Monterrey, Campus Estado de México.

== Authors

* *A01377950* <em>Zabdiel Valentín Garduño Vivanco</em>
* *A01377942* <em>Luis Jonathan Rosas Ramos</em>
* *A01377072* <em>Emiliano Heredia García</em>

== Overview

The Decorator Pattern allows to dynamically add behavior to an object depending on the needs of the
developer/user. Unlike other methods to reeplicate this, such as inheritance or interfaces, the Decorator
allows to add behavior to a specific object, independently from other objects. This enables developers to
add behavior according to the specific needs and only add/use whatever it needs. Rather than including a lot
of functionality that wont be used, or needs to be modified to make it fulfill the needs.

To test the program, inside the +src+ folder type the following instruction
at the command line:

    ruby -I . -w coffee_test.rb

The UML class diagram is as follows.
rdoc-image:img/diagrama.jpeg


== References

- \M. Fowler. <em>UML Distilled: A Brief Guide to the Standard Object Modeling Language, 3rd Edition.</em>  Addison-Wesley, 2003.

- \E. Gamma, R. Helm, R. Johnson, J. M. Vlissides. <em>Design Patterns: Elements of Reusable Object-Oriented Software.</em> Addison-Wesley, 1994.

- \R. Olsen. <em>Design Patterns in Ruby.</em> Addison-Wesley, 2007.

- Ruby-Doc.org. <em>RDoc Markup Reference.</em> {\http://ruby-doc.org/stdlib-2.4.1/libdoc/rdoc/rdoc/RDoc/Markup.html}[http://ruby-doc.org/stdlib-2.4.1/libdoc/rdoc/rdoc/RDoc/Markup.html] Accessed October 3, 2022.
